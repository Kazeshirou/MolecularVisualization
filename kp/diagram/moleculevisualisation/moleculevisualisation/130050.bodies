class Context
!!!136322.cpp!!!	Context(in width : int, in height : int)

    type = NoOpenGL;
    m_min = f;
    m_image.fill(m_color);
    m_zbuffer = newZbuffer(width, height);
!!!136450.cpp!!!	Context(in size : QSize)

    type = NoOpenGL;
    m_min = f;
    m_image.fill(m_color);
    m_zbuffer = newZbuffer(m_width, m_height);
!!!136578.cpp!!!	~Context()

    deleteZbuffer();
!!!136706.cpp!!!	clear() : void

    m_image.fill(m_color);
    for (int i = 0; i < m_width; i++)
        for (int j = 0; j < m_height; j++)
            m_zbuffer[i][j] = m_min;
!!!136834.cpp!!!	resize(in width : int, in height : int) : void

    if ((width == m_width) && (height == m_height))
        return;
    float **zbuffer = newZbuffer(width, height);
    m_image = QImage(width, height, QImage::Format_ARGB32);
    m_image.fill(m_color);
    deleteZbuffer();
    m_zbuffer = zbuffer;
    m_width = width;
    m_height = height;
    float aspect = m_width/ (m_height ? (float)m_height : 1.);
    m_projectionMatrix.setToIdentity();
    m_projectionMatrix.perspective(45, aspect, n,f );
    m_viewPortMatrix.setToIdentity();
    m_viewPortMatrix.translate(QVector3D(m_width/2.,m_height/2.,(f-n)/2.));
    m_viewPortMatrix.scale(m_width/2.,m_height/2.,(f-n)/2.);
!!!136962.cpp!!!	resize(in s : QSize) : void

    int width = s.width();
    int height = s.height();
    if ((width == m_width) && (height == m_height))
        return;
    float **zbuffer = newZbuffer(width, height);
    m_image = QImage(width, height, QImage::Format_ARGB32);
    m_image.fill(m_color);
    deleteZbuffer();
    m_zbuffer = zbuffer;
    m_width = width;
    m_height = height;
    float aspect = m_width/ (m_height ? (float)m_height : 1.);
    m_projectionMatrix.setToIdentity();
    m_projectionMatrix.perspective(45, aspect, n,f);
    m_viewPortMatrix.setToIdentity();
    m_viewPortMatrix.translate(QVector3D(m_width/2.,m_height/2.,(f-n)/2.));
    m_viewPortMatrix.scale(m_width/2.,m_height/2.,(f-n)/2.);
!!!137090.cpp!!!	getPixel(in x : int, in y : int) : QColor

    if (x >= m_width || y >= m_height || x < 0 || y < 0 )
        return QColor(0,0,0);
    return m_image.pixel(x, y);
!!!137218.cpp!!!	setPixel(in x : int, in y : int, in z : float, in color : QColor, in norm : QVector3D) : void

    if (x >= m_width || y >= m_height || x < 0 || y < 0 || z < n || z > f)
        return;
    if (z <= m_zbuffer[x][y]){
        QColor col = colorWithIntensity(color, norm);
        m_image.setPixel(x, y, col.rgba());
        m_zbuffer[x][y] = z;
    }
!!!137346.cpp!!!	getImage() : QImage

    return m_image;
!!!137474.cpp!!!	newZbuffer(in width : int, in height : int) : float

    float **zbuffer;
    zbuffer = new float*[width];
    for (int i = 0; i < width; i++){
        zbuffer[i] = new float[height];
        for (int j = 0; j < height; j++)
            zbuffer[i][j] = m_min;
    }
    return zbuffer;
!!!137602.cpp!!!	newZbuffer(in size : QSize) : float

    int width = size.width();
    int height = size.height();
    float **zbuffer;
    zbuffer = new float*[width];
    for (int i = 0; i < width; i++){
        zbuffer[i] = new float[height];
        for (int j = 0; j < height; j++)
            zbuffer[i][j] = m_min;
    }
    return zbuffer;
!!!137730.cpp!!!	deleteZbuffer() : void

    if (m_zbuffer){
        for (int i = 0; i < m_width; i++)
            delete m_zbuffer[i];
        delete m_zbuffer;
        m_zbuffer = nullptr;
    }
!!!137858.cpp!!!	colorWithIntensity(in color : QColor, in n : QVector3D) : QColor

    double intens = QVector3D::dotProduct(n, m_lightdir);
    return QColor(std::max(color.red()*intens,0.),std::max(color.green()*intens,0.),std::max(color.blue()*intens,0.));
